<!-- Start Header -->
<%- include("partials/header") %>
  <!-- End Header -->
  <link rel="stylesheet" href="/css/overview.css" />
  <!-- Start Wrapper -->
  <div class="wrapper">
    <section class="">
      <div class="container-fluid ">
        <div class="row">
          <div class="col-8">
            <div class="video" style="width: 1124px;margin: auto;"><div id="player"></div></div>
          </div>
          <div class="col-4">
            <div class="accordion" id="accordionExample">


              <%chapter.forEach((course,index)=> {%>
                <div class="accordion-item">
                  <h2 class="accordion-header" id="headingOne">
                    <button class="accordion-button" type="button" data-bs-toggle="collapse"
                      data-bs-target="#collapseOne<%=index%>" aria-expanded="true" aria-controls="collapseOne">
                      <%=course.title%>
                    </button>
                  </h2>
                  <div id="collapseOne<%=index%>" class="accordion-collapse collapse show" aria-labelledby="headingOne"
                    data-bs-parent="#accordionExample">
                    
                    <%video_list[index].forEach((v,i)=> {%>
                      <div class="accordion-body">

                        <%if(v.index<=courses.index){%>
                          <a onclick="return true"  id=<%=v.index%> href="/video/<%=courses._id%>/<%=v._id%>">
                            <%=v.title%>
                          </a>
                          <% }else{ %> 
                            <a onclick="return false"  id=<%=v.index%> href="/video/<%=courses._id%>/<%=v._id%>">
                              <%=v.title%>
                            </a>
                            <% } %> 

                        


                      </div>
                      <%})%>
                  </div>
                </div>
                <%})%>
            </div>
          </div>
        </div>
      </div>
    </section>


  </div>

  <!-- End Wrapper -->

  <!-- Start Footer -->
  <%- include('partials/footer'); %>
    <!-- End Footer -->

    <script src="/js/homepage.js"></script>

    <script>
      async function postData(url = '', data = {}) {
        const response = await fetch(url, {
          method: 'POST', // *GET, POST, PUT, DELETE, etc.
          mode: 'cors', // no-cors, *cors, same-origin
          cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
          credentials: 'same-origin', // include, *same-origin, omit
          headers: {
            'Content-Type': 'application/json'
            // 'Content-Type': 'application/x-www-form-urlencoded',
          },
          redirect: 'follow', // manual, *follow, error
          referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
          body: JSON.stringify(data) // body data type must match "Content-Type" header
        });
        return response.json(); // parses JSON response into native JavaScript objects
      }
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '633',
          width: '1124',
          videoId: '<%=video.URL%>',
          playerVars: {
            'playsinline': 1
          },
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange,
          }
        });

      }
      var b = '<%=courses.index%>'
      var d = '<%=courses._id%>'
      
      var c = {
        index: b,
        trainee_course_id: d
      }
      function onPlayerReady(event) {
        event.target.playVideo();

      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;

      function onPlayerStateChange(event) {

        var a = '<%=a%>'
        
        if (player.getPlayerState() === 0) {
          var x1 = document.getElementById(a);
          x1.onclick = true
          console.log('<%=next_video%>')
          postData('http://localhost:3000/video_update', c )
            .then(data => {
              console.log(data); 
            });

        }
      }
      function stopVideo() {
        player.stopVideo();
      }

    </script>